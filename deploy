#!/usr/bin/python

import functools
import logging
import os.path
import shutil
import sys

from os.path import join as _join

logger = logging.getLogger('deploy')
PROJ_ROOT = os.path.dirname(os.path.abspath(__file__))


def ignore_error(errors, logger=None, log_level='warning'):
    errors = tuple(errors) if hasattr(errors, '__iter__') else errors
    log_func = getattr(logger, log_level) if logger is not None else None

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except errors as e:
                if log_func is not None:
                    log_func('ignored error: %s: %s', type(e).__name__, e)
        return wrapper
    return decorator


def init_logging(verbose=0):
    log_level = int(logging.WARNING - verbose * 10)
    log_format = '%(asctime)s [%(levelname)s] ' \
                 '[%(name)s::%(funcName)s:%(lineno)d]: %(message)s'
    logging.basicConfig(format=log_format, level=log_level)

    for attr, lvl_str in [('DEBUG', 'DBG'), ('INFO', 'INF'), ('ERROR', 'ERR'),
                          ('WARNING', 'WRN'), ('CRITICAL', 'CRT')]:
        logging.addLevelName(getattr(logging, attr), lvl_str)


def deploy_bash(output_dir, **kwargs):
    logger.info('deploying bash...')
    shutil.copy2(_join(PROJ_ROOT, 'bashrc'), _join(output_dir, '.bashrc'))
    shutil.rmtree(_join(output_dir, '.bash'), ignore_errors=True)
    shutil.copytree(_join(PROJ_ROOT, 'bash'), _join(output_dir, '.bash'))


def deploy_vim(output_dir, **kwargs):
    logger.info('deploying vim...')
    ignore_error(OSError)(os.remove)(_join(output_dir, '.vimrc'))
    shutil.rmtree(_join(output_dir, '.vim'), ignore_errors=True)
    shutil.copytree(_join(PROJ_ROOT, 'vim'), _join(output_dir, '.vim'))


def create_parser():
    import argparse
    formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(formatter_class=formatter)
    parser.add_argument('-o', '--output-dir', help='output dir to deploy',
                        default=os.path.expanduser('~'))
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='verbosity level')
    parser.add_argument('comp', nargs='*', help='component to deploy')
    return parser


if __name__ == '__main__':
    args = create_parser().parse_args()
    init_logging(args.verbose)

    default_comps = ['vim', 'bash']
    args.comp = args.comp if args.comp else default_comps
    logger.info('deploy components: %s', args.comp)

    for comp in args.comp:
        deploy_func = globals().get('deploy_' + comp)
        if deploy_func is None:
            logger.error('cannot find deploy_%s()', comp)
            sys.exit(1)
        deploy_func(**args.__dict__)
